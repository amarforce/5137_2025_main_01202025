package frc.robot.Subsystems;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInLayouts;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardLayout;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.util.sendable.SendableBuilder;
import frc.robot.Constants.Vision_Constants;
import frc.robot.Constants.Vision_Constants.NT;
import frc.robot.Utils.VisionLogger;

import java.util.Map;
import java.util.Optional;
import org.photonvision.targeting.PhotonTrackedTarget;
import java.util.logging.Level;

public class VisionDataHandler extends SubsystemBase {
    private final NetworkTable visionTable;
    private final VisionLogger logger;
    private final Vision vision;
    
    // Shuffleboard tabs
    private final ShuffleboardTab visionTab;
    private final ShuffleboardTab debugTab;
    
    // Track detection statistics
    private int totalFrames = 0;
    private int validDetections = 0;
    private double lastDetectedDistance = 0.0;
    private double lastDetectedYaw = 0.0;
    private String lastDetectedClass = "none";
    
    public VisionDataHandler(Vision vision) {
        this.vision = vision;
        this.visionTable = NetworkTableInstance.getDefault().getTable(NT.VISION_TABLE);
        this.logger = new VisionLogger();
        
        // Initialize Shuffleboard tabs
        visionTab = Shuffleboard.getTab("Vision");
        debugTab = Shuffleboard.getTab("Vision Debug");
        
        configureShuffleboard();
        logger.logSystemEvent(Level.INFO, "VisionDataHandler initialized");
    }
    
    private void configureShuffleboard() {
        // Main Vision Data Layout
        ShuffleboardLayout mainLayout = visionTab
            .getLayout("Target Data", BuiltInLayouts.kList)
            .withSize(2, 4)
            .withPosition(0, 0)
            .withProperties(Map.of("Label position", "LEFT"));
            
        mainLayout.addNumber("Target X", this::getObjectX)
            .withWidget(BuiltInWidgets.kNumberBar)
            .withProperties(Map.of("min", -27.0, "max", 27.0));
            
        mainLayout.addString("Object Class", this::getObjectClass)
            .withWidget(BuiltInWidgets.kTextView);
            
        mainLayout.addBoolean("Target Detected", this::hasTarget)
            .withWidget(BuiltInWidgets.kBooleanBox);
            
        // Target Position Layout
        ShuffleboardLayout positionLayout = visionTab
            .getLayout("Position", BuiltInLayouts.kGrid)
            .withSize(3, 2)
            .withPosition(2, 0)
            .withProperties(Map.of("Number of columns", 2, "Number of rows", 2));
            
        positionLayout.addNumber("Distance (m)", () -> lastDetectedDistance)
            .withWidget(BuiltInWidgets.kDial)
            .withProperties(Map.of("min", 0, "max", 5));
            
        positionLayout.addNumber("Yaw (deg)", () -> lastDetectedYaw)
            .withWidget(BuiltInWidgets.kDial)
            .withProperties(Map.of("min", -180, "max", 180));
            
        // Performance Metrics Layout
        ShuffleboardLayout performanceLayout = debugTab
            .getLayout("Performance", BuiltInLayouts.kList)
            .withSize(2, 3)
            .withPosition(0, 0);
            
        performanceLayout.addNumber("Detection Rate", this::getDetectionRate)
            .withWidget(BuiltInWidgets.kNumberBar)
            .withProperties(Map.of("min", 0.0, "max", 100.0));
            
        performanceLayout.addNumber("Total Frames", () -> totalFrames);
        performanceLayout.addNumber("Valid Detections", () -> validDetections);
        
        // Raw Data Layout
        ShuffleboardLayout rawDataLayout = debugTab
            .getLayout("Raw Data", BuiltInLayouts.kGrid)
            .withSize(4, 2)
            .withPosition(2, 0);
            
        rawDataLayout.addNumber("Raw Yaw", () -> vision.getClosestCoral()
            .map(PhotonTrackedTarget::getYaw)
            .orElse(0.0));
            
        rawDataLayout.addNumber("Raw Pitch", () -> vision.getClosestCoral()
            .map(PhotonTrackedTarget::getPitch)
            .orElse(0.0));
            
        rawDataLayout.addNumber("Raw Area", () -> vision.getClosestCoral()
            .map(PhotonTrackedTarget::getArea)
            .orElse(0.0));
    }
    
    @Override
    public void periodic() {
        updateVisionData();
        updateNetworkTables();
        totalFrames++;
    }
    
    private void updateVisionData() {
        Optional<PhotonTrackedTarget> target = vision.getClosestCoral();
        
        if (target.isPresent()) {
            PhotonTrackedTarget t = target.get();
            lastDetectedDistance = t.getBestCameraToTarget().getTranslation().getNorm();
            lastDetectedYaw = t.getYaw();
            lastDetectedClass = vision.getObjectClass();
            validDetections++;
            
            logger.logSystemEvent(Level.FINE, String.format(
                "Target detected: class=%s, distance=%.2fm, yaw=%.2fÂ°",
                lastDetectedClass, lastDetectedDistance, lastDetectedYaw));
        }
    }
    
    private void updateNetworkTables() {
        try {
            visionTable.getEntry(NT.OBJECT_X_ENTRY)
                .setDouble(getObjectX());
            visionTable.getEntry(NT.OBJECT_CLASS_ENTRY)
                .setString(getObjectClass());
                
        } catch (Exception e) {
            logger.logError("Error updating NetworkTables", e);
        }
    }
    
    public double getObjectX() {
        return vision.getClosestCoral()
            .map(PhotonTrackedTarget::getYaw)
            .orElse(0.0);
    }
    
    public String getObjectClass() {
        return lastDetectedClass;
    }
    
    public boolean hasTarget() {
        return vision.getClosestCoral().isPresent();
    }
    
    private double getDetectionRate() {
        return totalFrames > 0 ? (validDetections * 100.0) / totalFrames : 0.0;
    }
    
    public void resetStats() {
        totalFrames = 0;
        validDetections = 0;
        lastDetectedDistance = 0.0;
        lastDetectedYaw = 0.0;
        lastDetectedClass = "none";
        logger.resetStats();
        logger.logSystemEvent(Level.INFO, "Vision statistics reset");
    }
    
    @Override
    public void initSendable(SendableBuilder builder) {
        super.initSendable(builder);
        builder.addDoubleProperty("Detection Rate", this::getDetectionRate, null);
        builder.addStringProperty("Last Detected Class", this::getObjectClass, null);
        builder.addBooleanProperty("Has Target", this::hasTarget, null);
    }
    
    public VisionLogger getLogger() {
        return logger;
    }
}
